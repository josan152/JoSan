<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance http://www.springmodules.org/schema/cache/springmodules-cache.xsd " xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee  http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
  <display-name>ssm-crud</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
 <!--  启动Spring的容器 -->


    <context-param> <!--全局范围内环境参数初始化 -->
        <param-name>contextConfigLocation</param-name>          <!--参数名称-->
        <param-value>classpath:spring-mybatis.xml</param-value>        <!--参数取值-->
    </context-param>
    
         <!--以下配置的加载顺序:先 ServletContext >> context-param >> listener >> filter >> servlet >>  spring-->
                                
    <!--例:编码过滤器-->
    <filter>        <!-- 用来声明filter的相关设定,过滤器可以截取和修改一个Servlet或JSP页面的请求或从一个Servlet或JSP页面发出的响应-->
        <filter-name>encodingFilter</filter-name>     <!--指定filter的名字-->
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>    <!--定义filter的类的名称-->
        <async-supported>true</async-supported>        <!--设置是否启用异步支持-->
        <init-param><!--用来定义参数,若在Servlet可以使用下列方法来获得:String param_name=getServletContext().getInitParamter("param-name里面的值");-->
            <param-name>encoding</param-name>   <!--参数名称-->
            <param-value>UTF-8</param-value> <!--参数值-->
        </init-param>
    </filter>
    <filter-mapping><!--用来定义filter所对应的URL-->
        <filter-name>encodingFilter</filter-name>     <!--指定对应filter的名字-->
        <url-pattern>/*</url-pattern>        <!--指定filter所对应的URL-->
    </filter-mapping>
    
    <!--例:spring监听器-->
    <listener>        <!--用来设定Listener接口-->
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class><!--定义Listener的类名称-->
    </listener>
    <!-- 防止Spring内存溢出监听器  -->
      <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
     </listener>
    
    
    <!-- 解决PUT请求无法提交表单数据的问题 --> 
 	<filter> 
		<filter-name>HttpMethodFilter</filter-name> 
		<filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class> 
	</filter> 
	<filter-mapping> 
		<filter-name>HttpMethodFilter</filter-name> 
		<url-pattern>/*</url-pattern> 
	</filter-mapping> 

    
    
    <servlet>        <!--用来声明一个servlet的数据 -->  
        <servlet-name>SpringMVC</servlet-name>    <!--指定servlet的名称-->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> <!--指定servlet的类名称,这里配置了前端控制器-->
        <init-param><!--用来定义参数,可有多个init-param。在servlet类中通过getInitParamenter(String name)方法访问初始化参数    -->
            <param-name>contextConfigLocation</param-name>    <!--参数名称-->
            <param-value>classpath:spring-mvc.xml</param-value>    <!--参数值-->
        </init-param>
        <load-on-startup>1</load-on-startup><!--当值为正数或零时：Servlet容器先加载数值小的servlet，再依次加载其他数值大的servlet.-->
        <async-supported>true</async-supported><!--设置是否启用异步支持-->
    </servlet>
    <servlet-mapping><!--用来定义servlet所对应的URL-->
        <servlet-name>SpringMVC</servlet-name>    <!--指定servlet的名称-->
        <url-pattern>/</url-pattern>        <!--指定servlet所对应的URL-->
    </servlet-mapping>
    
    <!-- 会话超时配置（单位为分钟） -->
    <session-config><!--如果某个会话在一定时间未被访问，则服务器可以扔掉以节约内存-->
        <session-timeout>120</session-timeout>
    </session-config>
	<!-- MIME类型配置 -->
    <mime-mapping><!--设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开-->
        <extension>*.ppt</extension>            <!--扩展名名称-->
        <mime-type>application/mspowerpoint</mime-type>            <!--MIME格式-->
    </mime-mapping>



    


  
</web-app>